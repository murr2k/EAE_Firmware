name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  BUILD_TYPE: Release
  PYTHON_VERSION: '3.8'

jobs:
  # C++ Build and Test Job
  cpp-build-test:
    name: C++ Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-20.04]
        compiler: 
          - { cc: gcc-9, cxx: g++-9 }
          - { cc: gcc-10, cxx: g++-10 }
          - { cc: clang-12, cxx: clang++-12 }
        include:
          - os: ubuntu-latest
            compiler: { cc: gcc-11, cxx: g++-11 }

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build ${{ matrix.compiler.cc }} ${{ matrix.compiler.cxx }}
        
    - name: Configure CMake
      env:
        CC: ${{ matrix.compiler.cc }}
        CXX: ${{ matrix.compiler.cxx }}
      run: |
        cmake -B ${{github.workspace}}/build \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Run unit tests
      working-directory: ${{github.workspace}}/build
      run: |
        ./eae_tests --gtest_output=xml:test_results.xml
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.compiler.cxx }}
        path: build/test_results.xml

    - name: Run main application test
      working-directory: ${{github.workspace}}/build
      run: |
        ./eae_firmware --help
        timeout 5s ./eae_firmware --test || true

  # Python Testing Job
  python-test:
    name: Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pylint

    - name: Lint Python code
      run: |
        pylint --exit-zero cooling_control.py

    - name: Run Python implementation
      run: |
        timeout 35s python3 cooling_control.py || true

    - name: Create Python test file
      run: |
        cat > test_cooling.py << 'EOF'
        import pytest
        import sys
        import os
        sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
        from cooling_control import SystemState, CoolingController, PIDController

        def test_system_states():
            assert SystemState.OFF.value == 1
            assert SystemState.RUNNING.value == 3

        def test_pid_controller():
            pid = PIDController(kp=1.0, ki=0.1, kd=0.01, setpoint=65.0)
            output = pid.calculate(60.0)
            assert output > 0  # Should produce positive output when below setpoint

        def test_cooling_controller_init():
            controller = CoolingController()
            assert controller.state == SystemState.OFF
            assert controller.sensors.temperature == 25.0
        EOF

    - name: Run Python tests
      run: |
        pytest test_cooling.py -v

  # Static Analysis Job
  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install analysis tools
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-tidy-12 clang-format-12

    - name: Run cppcheck
      run: |
        cppcheck --enable=all \
                 --suppress=missingIncludeSystem \
                 --error-exitcode=1 \
                 --inline-suppr \
                 -I include/ \
                 src/ 2>&1 | tee cppcheck_results.txt

    - name: Check code formatting
      run: |
        find . -name '*.cpp' -o -name '*.h' | grep -E '(src/|include/)' | \
        xargs clang-format-12 --dry-run -Werror 2>&1 | tee format_check.txt || true

    - name: Upload analysis results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: static-analysis-results
        path: |
          cppcheck_results.txt
          format_check.txt

  # Memory and Sanitizer Tests
  sanitizer-tests:
    name: Sanitizer Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake g++-11 valgrind

    - name: Build with AddressSanitizer
      run: |
        cmake -B build-asan \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_CXX_FLAGS="-fsanitize=address -fno-omit-frame-pointer"
        cmake --build build-asan

    - name: Run tests with AddressSanitizer
      run: |
        cd build-asan
        ASAN_OPTIONS=detect_leaks=1 ./eae_tests

    - name: Build with ThreadSanitizer
      run: |
        cmake -B build-tsan \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_CXX_FLAGS="-fsanitize=thread"
        cmake --build build-tsan

    - name: Run tests with ThreadSanitizer
      run: |
        cd build-tsan
        TSAN_OPTIONS=halt_on_error=1 ./eae_tests || true

    - name: Run Valgrind memory check
      run: |
        cmake -B build-valgrind -DCMAKE_BUILD_TYPE=Debug
        cmake --build build-valgrind
        cd build-valgrind
        valgrind --leak-check=full --error-exitcode=1 ./eae_tests

  # Documentation Build
  documentation:
    name: Documentation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Doxygen
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz

    - name: Generate Doxygen config
      run: |
        cat > Doxyfile << 'EOF'
        PROJECT_NAME           = "EAE Firmware"
        PROJECT_NUMBER         = "1.0.0"
        PROJECT_BRIEF          = "Cooling Control System"
        OUTPUT_DIRECTORY       = docs
        INPUT                  = src include README.md
        RECURSIVE              = YES
        EXTRACT_ALL            = YES
        GENERATE_LATEX         = NO
        HAVE_DOT               = YES
        UML_LOOK               = YES
        CALL_GRAPH             = YES
        USE_MDFILE_AS_MAINPAGE = README.md
        EOF

    - name: Generate documentation
      run: doxygen Doxyfile

    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/html/

  # Release Build Job
  release-build:
    name: Release Build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake g++ zip

    - name: Build release
      run: |
        ./build.sh
        
    - name: Create release package
      run: |
        mkdir -p release/EAE_Firmware
        cp -r build/eae_firmware build/eae_tests release/EAE_Firmware/
        cp README.md CHANGELOG.md LICENSE release/EAE_Firmware/ || true
        cd release
        zip -r EAE_Firmware-${{ github.ref_name }}.zip EAE_Firmware/

    - name: Upload release artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts
        path: release/*.zip

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Run security scan
      uses: github/super-linter@v4
      env:
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VALIDATE_CPP: true
        VALIDATE_PYTHON3: true
        VALIDATE_YAML: true
        VALIDATE_JSON: true
        VALIDATE_MARKDOWN: true
        FILTER_REGEX_EXCLUDE: '.*/build/.*'

  # Summary Job
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [cpp-build-test, python-test, static-analysis, sanitizer-tests, documentation]
    if: always()

    steps:
    - name: Check build status
      run: |
        echo "## CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| C++ Build & Test | ${{ needs.cpp-build-test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Python Tests | ${{ needs.python-test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Static Analysis | ${{ needs.static-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Sanitizer Tests | ${{ needs.sanitizer-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Documentation | ${{ needs.documentation.result }} |" >> $GITHUB_STEP_SUMMARY